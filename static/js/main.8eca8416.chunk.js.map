{"version":3,"sources":["components/TilerOptions.module.scss","components/mapPanel/TilerMapGrid.module.scss","components/TilerPanels.module.scss","components/mapPanel/TilerMapPanel.module.scss","components/TileManager.module.scss","components/mapPanel/TilerPalette.module.scss","components/mapPanel/TilerPaletteOption.module.scss","components/TilerStringPanel.module.scss","lib/types.ts","Common.tsx","components/TabView.tsx","components/TilerOptions.tsx","components/mapPanel/TilerMapGrid.tsx","components/mapPanel/TilerPaletteOption.tsx","components/mapPanel/TilerPalette.tsx","components/mapPanel/TilerMapPanel.tsx","components/TilerStringPanel.tsx","lib/tile.ts","lib/tiles/empty.ts","lib/tiles/rock.ts","lib/tiles/mountain.ts","lib/tiles/peak.ts","lib/tiles/proto-peak.ts","lib/tiles/road.ts","lib/registry.ts","lib/services/loader-service.ts","lib/world.ts","components/TilerManager.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","MouseButton","Common","handleError","err","console","error","alert","TabView","elements","React","useState","activeIndex","setActiveIndex","currentElement","element","className","styles","root","tabs","map","idx","tab","active","onClick","e","label","body","renderOptions","DimensionInput","props","onChange","doUpdate","preventDefault","value","currentTarget","trim","number","parseInt","isNaN","setValue","Math","min","doUpdateValue","type","id","style","width","onBlur","onKeyDown","key","TilerOptions","mapRendererOptions","mapGridWidthPx","setMapGridWidthPx","mapGridHeightPx","setMapGridHeightPx","cellWidthPx","setCellWidthPx","cellHeightPx","setCellHeightPx","cellFontSizePx","setCellFontSizePx","line","form","htmlFor","setMapRendererOptions","renderMode","onChangeRenderMode","Object","keys","max","current","defaults","DEFAULT_MAP_RENDERER_OPTIONS","Lodash","isEqual","onResetOptions","resetMap","TileCell","maxSize","parentProps","content","useMemo","height","useSprite","metaValue","overlay","strong","weak","tile","cellStyle","onMouseUp","button","posX","posY","onContextMenu","TilerMapGrid","grid","Array","from","mapDefinitions","mapWidth","mapHeight","_","tileId","tileData","tileResolver","getTileFromId","floor","sprite","renderImage","world","calculateValueAsString","pooledSpriteElement","spritePool","spriteName","fontSize","TilerPaletteOption","imgSrc","paletteImage","isActive","toggle","src","alt","idName","title","TilerPalette","paletteController","currentTile","setCurrentTile","useEffect","allTiles","filter","showsOnPalette","tileWrapper","onToggle","TilerMapPanel","gridWrapper","innerGridWrapper","paletteWrapper","TilerStringPanel","Tile","this","replacement","includeDiagonals","it","getTileAt","EmptyTile","RockTile","iterateAdjacentTiles","MountainTile","calculateValue","positionsOrder","PeakTile","pos","calculatePosition","tryToSetTileAt","PROTO_PEAK_TILE","edge","x","y","setTileAt","EMPTY_TILE","offsetX","offsetY","ProtoPeakTile","success","PEAK_TILE","RoadTile","ROAD_TILE","ROCK_TILE","MOUNTAIN_TILE","tileRegistry","emptyTile","timestamp","Date","getTime","spritesheet","jsonUrl","imageUrl","preloadImages","LoaderService","fetch","then","response","json","coordinateMap","wid","hei","frame","w","h","url","meta","image","Promise","all","preloadImage","resolve","reject","img","Image","onload","onerror","StandardWorld","mapDefs","updateData","_data","data","skipEvents","curTile","undefined","getIdFromTile","onTileReplaced","onTilePlaced","loaderService","TilerManager","statusMessage","setStatusMessage","jsonData","setJsonData","setMapDefinitions","setTileResolver","setTileData","setSpritePool","setWorld","useRef","loadJson","loadSpritesheetInfo","spritesheetInfo","loadSpritesheetImage","info","coordinates","bgWid","bgHei","backgroundImage","backgroundPosition","backgroundSize","loadSpritePool","catch","tileIdsToNames","tileNamesToIds","tileIdStr","tileIdName","find","next","Error","emptyId","initializeTileData","mapView","paletteTile","Right","stringView","rootWrapper","tabviewWrapper","overwriteData","fillId","fill","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8eca8416.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TilerOptions_root__3NoQD\",\"line\":\"TilerOptions_line__CqBtH\",\"form\":\"TilerOptions_form__1X5oS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"TilerMapGrid_grid__1qMcD\",\"tile\":\"TilerMapGrid_tile__1cPqI\",\"overlay\":\"TilerMapGrid_overlay__34avY\",\"weak\":\"TilerMapGrid_weak__QSb5X\",\"strong\":\"TilerMapGrid_strong__2ENK2\",\"metaValue\":\"TilerMapGrid_metaValue__2MQkx\",\"spriteWrapper\":\"TilerMapGrid_spriteWrapper__7nIWn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TilerPanels_root__JMW_0\",\"tabs\":\"TilerPanels_tabs__ANLdR\",\"body\":\"TilerPanels_body__2SRcy\",\"tab\":\"TilerPanels_tab__1G8dR\",\"active\":\"TilerPanels_active__xexhi\",\"element\":\"TilerPanels_element__heazb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TilerMapPanel_root__dUuXD\",\"gridWrapper\":\"TilerMapPanel_gridWrapper__s_FfO\",\"innerGridWrapper\":\"TilerMapPanel_innerGridWrapper__3r49Z\",\"paletteWrapper\":\"TilerMapPanel_paletteWrapper__2SLyo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rootWrapper\":\"TileManager_rootWrapper__3N7RU\",\"tabviewWrapper\":\"TileManager_tabviewWrapper__NQP4B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TilerPalette_root__34cPI\",\"tileWrapper\":\"TilerPalette_tileWrapper__1fiUo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TilerPaletteOption_root__FOhSs\",\"active\":\"TilerPaletteOption_active__18CBp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TilerStringPanel_root__1sspR\"};","export enum MouseButton {\r\n    Left = 0,\r\n    Middle = 1,\r\n    Right = 2,\r\n}\r\n","const Common = {\r\n    handleError(err: any) {\r\n        console.error(err);\r\n        alert('Application error! Check dev console (F12).');\r\n    },\r\n};\r\n\r\nexport default Common;\r\n","import React from 'react';\r\nimport styles from './TilerPanels.module.scss';\r\n\r\ntype Props = {\r\n    elements: {\r\n        element: React.ReactElement;\r\n        label: string;\r\n    }[];\r\n};\r\n\r\nconst TabView: React.FC<Props> = ({ elements }) => {\r\n    const [activeIndex, setActiveIndex] = React.useState(0);\r\n\r\n    const currentElement = elements[activeIndex].element;\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            <div className={styles.tabs + ' noselect'}>\r\n                {elements.map((element, idx) => (\r\n                    <div key={idx}\r\n                        className={styles.tab + (activeIndex === idx ? (' ' + styles.active) : '')}\r\n                        onClick={e => setActiveIndex(idx)}\r\n                    >\r\n                        {element.label}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            <div className={styles.body}>\r\n                {currentElement}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TabView;\r\n","import React from 'react';\r\nimport styles from './TilerOptions.module.scss';\r\nimport { DEFAULT_MAP_RENDERER_OPTIONS, MapDefinitions, MapRendererOptions, RenderMode } from './TilerManager';\r\nimport Lodash from 'lodash';\r\n\r\ntype Props = {\r\n    mapDefinitions: MapDefinitions;\r\n    setMapDefinitions: (defs: MapDefinitions) => void;\r\n    mapRendererOptions: MapRendererOptions;\r\n    setMapRendererOptions: (opts: MapRendererOptions) => void;\r\n    resetMap: () => void;\r\n};\r\n\r\n// renderMode -> label\r\nconst renderOptions: Record<RenderMode, string> = {\r\n    'normal': 'Normal',\r\n    'value': 'Show values',\r\n};\r\n\r\nconst TilerOptions: React.FC<Props> = (props) => {\r\n    const [mapGridWidthPx, setMapGridWidthPx] =\r\n        React.useState<number | null>(props.mapRendererOptions.mapGridWidthPx);\r\n    const [mapGridHeightPx, setMapGridHeightPx] =\r\n        React.useState<number | null>(props.mapRendererOptions.mapGridHeightPx);\r\n    const [cellWidthPx, setCellWidthPx] =\r\n        React.useState<number | null>(props.mapRendererOptions.cellWidthPx);\r\n    const [cellHeightPx, setCellHeightPx] =\r\n        React.useState<number | null>(props.mapRendererOptions.cellHeightPx);\r\n    const [cellFontSizePx, setCellFontSizePx] =\r\n        React.useState<number | null>(props.mapRendererOptions.cellFontSizePx);\r\n\r\n    const onChangeRenderMode = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        const value = e.currentTarget.value;\r\n        props.setMapRendererOptions({\r\n            ...props.mapRendererOptions,\r\n            renderMode: value as RenderMode,\r\n        });\r\n    };\r\n\r\n    const onResetOptions = () => {\r\n        const current = props.mapRendererOptions;\r\n        const defaults = DEFAULT_MAP_RENDERER_OPTIONS;\r\n\r\n        if (!Lodash.isEqual(current, defaults)) {\r\n            props.setMapRendererOptions(defaults);\r\n            setMapGridWidthPx(defaults.mapGridWidthPx);\r\n            setMapGridHeightPx(defaults.mapGridHeightPx);\r\n            setCellWidthPx(defaults.cellWidthPx);\r\n            setCellHeightPx(defaults.cellHeightPx);\r\n            setCellFontSizePx(defaults.cellFontSizePx);\r\n        }\r\n    };\r\n\r\n    const onClearMap = () => {\r\n        props.resetMap();\r\n    };\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            <div className={styles.line}>\r\n                <div className={styles.form}>\r\n                    <label htmlFor=\"renderMode\">Render Mode</label>\r\n                    <select id=\"renderMode\" onChange={e => onChangeRenderMode(e)}>\r\n                        {Object.keys(renderOptions).map(key => (\r\n                            <option value={key} key={key}>\r\n                                {renderOptions[key as RenderMode]}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n\r\n                <div className={styles.form}>\r\n                    <label htmlFor=\"mapGridWidthPx\">Canvas Width</label>\r\n                    <DimensionInput value={mapGridWidthPx} setValue={setMapGridWidthPx}\r\n                        doUpdateValue={value => {\r\n                            value = Math.min(value, 4000);\r\n                            value = Math.max(value, 300);\r\n                            props.setMapRendererOptions({\r\n                                ...props.mapRendererOptions,\r\n                                mapGridWidthPx: value,\r\n                            })\r\n                        }}\r\n                    />\r\n                </div>\r\n\r\n                <div className={styles.form}>\r\n                    <label htmlFor=\"mapGridHeightPx\">Canvas Height</label>\r\n                    <DimensionInput value={mapGridHeightPx} setValue={setMapGridHeightPx}\r\n                        doUpdateValue={value => {\r\n                            value = Math.max(value, 200);\r\n                            props.setMapRendererOptions({\r\n                                ...props.mapRendererOptions,\r\n                                mapGridHeightPx: value,\r\n                            })\r\n                        }}\r\n                    />\r\n                </div>\r\n\r\n                <div className={styles.form}>\r\n                    <label htmlFor=\"cellWidthPx\">Cell Width</label>\r\n                    <DimensionInput value={cellWidthPx} setValue={setCellWidthPx}\r\n                        doUpdateValue={value => {\r\n                            props.setMapRendererOptions({\r\n                                ...props.mapRendererOptions,\r\n                                cellWidthPx: value,\r\n                            })\r\n                        }}\r\n                    />\r\n                </div>\r\n\r\n                <div className={styles.form}>\r\n                    <label htmlFor=\"cellHeightPx\">Cell Height</label>\r\n                    <DimensionInput value={cellHeightPx} setValue={setCellHeightPx}\r\n                        doUpdateValue={value => {\r\n                            props.setMapRendererOptions({\r\n                                ...props.mapRendererOptions,\r\n                                cellHeightPx: value,\r\n                            })\r\n                        }}\r\n                    />\r\n                </div>\r\n\r\n                <div className={styles.form}>\r\n                    <label htmlFor=\"cellFontSizePx\">Cell Font Size</label>\r\n                    <DimensionInput value={cellFontSizePx} setValue={setCellFontSizePx}\r\n                        doUpdateValue={value => {\r\n                            props.setMapRendererOptions({\r\n                                ...props.mapRendererOptions,\r\n                                cellFontSizePx: value,\r\n                            })\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <div className={styles.line}>\r\n                <button onClick={() => onResetOptions()}>Reset options</button>\r\n                <div style={{ width: 8 }}></div>\r\n                <button onClick={() => onClearMap()}>Clear all tiles</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst DimensionInput: React.FC<{\r\n    value: number | null;\r\n    setValue: (v: number | null) => void;\r\n    doUpdateValue: (v: number) => void;\r\n}> = (props) => {\r\n    const onChange = (\r\n        e: React.FormEvent<HTMLInputElement>,\r\n        doUpdate: boolean,\r\n    ) => {\r\n        e.preventDefault();\r\n        const value = e.currentTarget.value.trim();\r\n        let number: number | null = parseInt(value);\r\n\r\n        if (isNaN(number))\r\n            number = null;\r\n\r\n        if (number !== props.value)\r\n            props.setValue(value ? number : null);\r\n\r\n        if (doUpdate && number && !isNaN(Math.min(number))) {\r\n            props.doUpdateValue(number);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <input type=\"text\" id=\"mapGridHeightPx\" value={props.value ?? ''} style={{ width: 100 }}\r\n            onChange={e => onChange(e, false)}\r\n            onBlur={e => onChange(e, true)}\r\n            onKeyDown={e => {\r\n                if (e.key === 'Enter')\r\n                    onChange(e, true);\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default TilerOptions;\r\n","import React from 'react';\r\nimport { Tile } from '../../lib/tile';\r\nimport { MouseButton } from '../../lib/types';\r\nimport { World } from '../../lib/world';\r\nimport { MapDefinitions, MapRendererOptions, SpritePool, TileResolver } from '../TilerManager';\r\nimport styles from './TilerMapGrid.module.scss';\r\n\r\ntype Props = {\r\n    tileData: readonly number[];\r\n    mapRendererOptions: MapRendererOptions;\r\n    mapDefinitions: MapDefinitions;\r\n    tileResolver: TileResolver;\r\n    spritePool: SpritePool;\r\n    onClick: (x: number, y: number, button: MouseButton) => void;\r\n    world: World;\r\n};\r\n\r\nconst TilerMapGrid: React.FC<Props> = (props) => {\r\n    const cellStyle: React.CSSProperties = {\r\n        width: props.mapRendererOptions.cellWidthPx + 2, // +2 = border\r\n        height: props.mapRendererOptions.cellHeightPx + 2, // + 2 = border\r\n    };\r\n\r\n    const grid = Array.from(new Array(props.mapDefinitions.mapWidth * props.mapDefinitions.mapHeight))\r\n        .map((_, idx) => {\r\n            const tileId = props.tileData[idx];\r\n            const tile = props.tileResolver.getTileFromId(tileId);\r\n            const posX = idx % props.mapDefinitions.mapWidth;\r\n            const posY = Math.floor(idx / props.mapDefinitions.mapWidth);\r\n\r\n            const sprite = tile.renderImage(props.world, posX, posY);\r\n            const metaValue = props.mapRendererOptions.renderMode === 'value'\r\n                ? tile.calculateValueAsString(props.world, posX, posY)\r\n                : null;\r\n\r\n            const pooledSpriteElement = sprite !== null\r\n                ? props.spritePool[sprite.spriteName]\r\n                : null;\r\n\r\n            return (\r\n                <TileCell key={idx}\r\n                    cellStyle={cellStyle}\r\n                    parentProps={props}\r\n                    posX={posX}\r\n                    posY={posY}\r\n                    tile={tile}\r\n                    world={props.world}\r\n                    metaValue={metaValue}\r\n                    useSprite={pooledSpriteElement}\r\n                />\r\n            );\r\n        });\r\n\r\n    return (\r\n        <div className={styles.grid + ' noselect'} style={{\r\n            width: props.mapDefinitions.mapWidth * (props.mapRendererOptions.cellWidthPx + 2), // +2 = border\r\n            fontSize: props.mapRendererOptions.cellFontSizePx,\r\n        }}>\r\n            {grid}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst TileCell: React.FC<{\r\n    cellStyle: React.CSSProperties;\r\n    parentProps: Props;\r\n    posX: number;\r\n    posY: number;\r\n    tile: Tile;\r\n    world: World;\r\n    useSprite: React.ReactElement | null;\r\n    metaValue: string | null;\r\n}> = (props) => {\r\n    // TODO maybe wrap all this inside React.useMemo\r\n\r\n    const maxSize = Math.min(\r\n        props.parentProps.mapRendererOptions.cellWidthPx,\r\n        props.parentProps.mapRendererOptions.cellHeightPx,\r\n    );\r\n\r\n    const content = React.useMemo(() => (\r\n        <>\r\n            <div style={{\r\n                // maxWidth: maxSize,\r\n                // maxHeight: maxSize,\r\n                width: maxSize,\r\n                height: maxSize,\r\n            }}>\r\n                {props.useSprite}\r\n            </div>\r\n\r\n            {props.metaValue !== null\r\n                && <div className={styles.metaValue}><span>{props.metaValue}</span></div>}\r\n\r\n            {props.useSprite !== null\r\n                ? <div className={styles.overlay + ' ' + styles.strong}></div>\r\n                : <div className={styles.overlay + ' ' + styles.weak}></div>}\r\n        </>\r\n    ), [props.metaValue, maxSize, props.useSprite]);\r\n\r\n    return (\r\n        <div\r\n            className={styles.tile}\r\n            style={props.cellStyle}\r\n            onMouseUp={(e) => {\r\n                const button = e.button;\r\n                props.parentProps.onClick(props.posX, props.posY, button);\r\n            }}\r\n            onContextMenu={e => {\r\n                e.preventDefault();\r\n                return false;\r\n            }}\r\n        >\r\n            {content}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TilerMapGrid;\r\n","import React from 'react';\r\nimport styles from './TilerPaletteOption.module.scss';\r\nimport { Tile } from '../../lib/tile';\r\n\r\ntype Props = {\r\n    tile: Tile;\r\n    isActive: boolean;\r\n    toggle: () => void;\r\n};\r\n\r\nconst TilerPaletteOption: React.FC<Props> = (props) => {\r\n    const imgSrc = 'res/palette/' + props.tile.paletteImage() + '.png';\r\n\r\n    return (\r\n        <div\r\n            className={styles.root + ' ' + (props.isActive ? styles.active : '')}\r\n            onClick={e => props.toggle()}\r\n        >\r\n            <img\r\n                src={imgSrc}\r\n                alt={props.tile.idName}\r\n                title={props.tile.idName} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TilerPaletteOption;\r\n","import React from 'react';\r\nimport { Tile } from '../../lib/tile';\r\nimport { PaletteController } from '../TilerManager';\r\nimport styles from './TilerPalette.module.scss';\r\nimport TilerPaletteOption from './TilerPaletteOption';\r\n\r\ntype Props = {\r\n    allTiles: Tile[];\r\n    paletteController: PaletteController;\r\n};\r\n\r\nconst TilerPalette: React.FC<Props> = (props) => {\r\n    const [currentTile, setCurrentTile] = React.useState<Tile | null>\r\n        (props.paletteController.currentTile);\r\n\r\n    React.useEffect(() => {\r\n        props.paletteController.currentTile = currentTile;\r\n    }, [currentTile, props.paletteController]);\r\n\r\n    const onToggle = (tile: Tile) => {\r\n        if (currentTile === tile)\r\n            setCurrentTile(null);\r\n        else\r\n            setCurrentTile(tile);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.root + ' noselect'}>\r\n            {props.allTiles.filter(tile => tile.showsOnPalette()).map((tile, idx) => {\r\n                return (\r\n                    <div className={styles.tileWrapper} key={idx}>\r\n                        <TilerPaletteOption\r\n                            tile={tile}\r\n                            isActive={tile === currentTile}\r\n                            toggle={() => onToggle(tile)}\r\n                        />\r\n                    </div>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TilerPalette;\r\n","import React from 'react';\r\nimport { MouseButton } from '../../lib/types';\r\nimport { World } from '../../lib/world';\r\nimport { MapDefinitions, MapRendererOptions, PaletteController, SpritePool, TileResolver } from '../TilerManager';\r\nimport TilerMapGrid from './TilerMapGrid';\r\nimport style from './TilerMapPanel.module.scss';\r\nimport TilerPalette from './TilerPalette';\r\n\r\ntype Props = {\r\n    tileData: readonly number[];\r\n    setTileData: (tileData: number[]) => void;\r\n    mapRendererOptions: MapRendererOptions;\r\n    mapDefinitions: MapDefinitions;\r\n    tileResolver: TileResolver;\r\n    paletteController: PaletteController;\r\n    spritePool: SpritePool;\r\n    onClick: (x: number, y: number, button: MouseButton) => void;\r\n    world: World;\r\n};\r\n\r\nconst TilerMapPanel: React.FC<Props> = (props) => {\r\n    return (\r\n        <div className={style.root}>\r\n            <div className={style.gridWrapper}>\r\n                <div className={style.innerGridWrapper}>\r\n                    <TilerMapGrid\r\n                        tileData={props.tileData}\r\n                        mapRendererOptions={props.mapRendererOptions}\r\n                        mapDefinitions={props.mapDefinitions}\r\n                        tileResolver={props.tileResolver}\r\n                        spritePool={props.spritePool}\r\n                        onClick={props.onClick}\r\n                        world={props.world}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <div className={style.paletteWrapper}>\r\n                <TilerPalette\r\n                    allTiles={props.tileResolver.allTiles}\r\n                    paletteController={props.paletteController}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TilerMapPanel;\r\n","import React from 'react';\r\nimport styles from './TilerStringPanel.module.scss';\r\n\r\nconst TilerStringPanel: React.FC = (props) => {\r\n    //:: State\r\n\r\n    //:: Variables\r\n\r\n    //:: Hooks\r\n\r\n    //:: Callbacks\r\n\r\n    //:: Components\r\n\r\n    return (\r\n        <div className={styles.root}>TODO import/export...</div>\r\n    );\r\n};\r\n\r\nexport default TilerStringPanel;\r\n","import { Sprite } from \"./spritesheet\";\r\nimport { World } from \"./world\";\r\n\r\nexport abstract class Tile {\r\n    readonly idName: string; // must be UNIQUE among Tile implementations\r\n\r\n    constructor(idName: string) {\r\n        this.idName = idName;\r\n    }\r\n\r\n    //:: Misc\r\n\r\n    calculateValue(world: World, posX: number, posY: number): number | null {\r\n        return null;\r\n    }\r\n\r\n    calculateValueAsString(world: World, posX: number, posY: number): string | null {\r\n        return null;\r\n    }\r\n\r\n    //:: Graphics\r\n\r\n    renderImage(world: World, posX: number, posY: number): Sprite | null {\r\n        return {\r\n            spriteName: this.idName,\r\n        };\r\n    }\r\n\r\n    showsOnPalette() {\r\n        return true;\r\n    }\r\n\r\n    paletteImage() {\r\n        return this.idName;\r\n    }\r\n\r\n    //:: Events\r\n\r\n    /** Returns true if it made any change to the world's tiledata */\r\n    onTilePlaced(world: World, posX: number, posY: number): boolean {\r\n        return false;\r\n    }\r\n\r\n    /** Returns true if it made any change to the world's tiledata */\r\n    onTileReplaced(world: World, posX: number, posY: number, replacement: Tile): boolean {\r\n        return false;\r\n    }\r\n\r\n    protected iterateAdjacentTiles(\r\n        world: World,\r\n        posX: number,\r\n        posY: number,\r\n        includeDiagonals: boolean,\r\n        it: (tile: Tile | undefined) => void,\r\n    ): void {\r\n\r\n        it(world.getTileAt(posX - 1, posY));\r\n        it(world.getTileAt(posX + 1, posY));\r\n        it(world.getTileAt(posX, posY - 1));\r\n        it(world.getTileAt(posX, posY + 1));\r\n\r\n        if (includeDiagonals) {\r\n            it(world.getTileAt(posX - 1, posY - 1));\r\n            it(world.getTileAt(posX + 1, posY - 1));\r\n            it(world.getTileAt(posX - 1, posY + 1));\r\n            it(world.getTileAt(posX + 1, posY + 1));\r\n        }\r\n    }\r\n}\r\n","import { Tile } from \"../tile\";\r\nimport { World } from \"../world\";\r\n\r\nexport class EmptyTile extends Tile {\r\n    renderImage(world: World, posX: number, posY: number) {\r\n        return null;\r\n    }\r\n}\r\n","import { Tile } from \"../tile\";\r\nimport { World } from \"../world\";\r\nimport { MountainTile } from \"./mountain\";\r\n\r\nexport class RockTile extends Tile {\r\n    calculateValue(world: World, posX: number, posY: number): number {\r\n        // +1% of base hp.\r\n        // +1% for each adjacent rock or mountain.\r\n\r\n        let value = 1;\r\n\r\n        this.iterateAdjacentTiles(world, posX, posY, false, tile => {\r\n            if (tile instanceof RockTile || tile instanceof MountainTile)\r\n                value += 1;\r\n        });\r\n\r\n        return value;\r\n    }\r\n\r\n    calculateValueAsString(world: World, posX: number, posY: number): string | null {\r\n        const value = this.calculateValue(world, posX, posY);\r\n        return value > 0\r\n            ? ('+' + value)\r\n            : ('' + value);\r\n    }\r\n}\r\n","import { Tile } from \"../tile\";\r\nimport { World } from \"../world\";\r\nimport { RockTile } from \"./rock\";\r\n\r\nexport class MountainTile extends Tile {\r\n    calculateValue(world: World, posX: number, posY: number): number {\r\n        // +2% of base hp for each adjacent rock or mountain.\r\n\r\n        let value = 0;\r\n\r\n        this.iterateAdjacentTiles(world, posX, posY, false, tile => {\r\n            if (tile instanceof RockTile || tile instanceof MountainTile)\r\n                value += 2;\r\n        });\r\n\r\n        return value;\r\n    }\r\n\r\n    calculateValueAsString(world: World, posX: number, posY: number): string | null {\r\n        const value = this.calculateValue(world, posX, posY);\r\n        return value > 0\r\n            ? ('+' + value)\r\n            : ('' + value);\r\n    }\r\n}\r\n","import { EMPTY_TILE, PROTO_PEAK_TILE } from \"../registry\";\r\nimport { Sprite } from \"../spritesheet\";\r\nimport { Tile } from \"../tile\";\r\nimport { World } from \"../world\";\r\nimport { MountainTile } from \"./mountain\";\r\nimport { RockTile } from \"./rock\";\r\n\r\ntype Position =\r\n    'topleft' | 'topcenter' | 'topright' |\r\n    'midleft' | 'midcenter' | 'midright' |\r\n    'botleft' | 'botcenter' | 'botright' ;\r\n\r\nconst positionsOrder: Position[] = [\r\n    'topleft', 'topcenter', 'topright',\r\n    'midleft', 'midcenter', 'midright',\r\n    'botleft', 'botcenter', 'botright'\r\n];\r\n\r\nexport class PeakTile extends Tile {\r\n    showsOnPalette() {\r\n        return false;\r\n    }\r\n\r\n    calculateValue(world: World, posX: number, posY: number): number {\r\n        // +48% hp\r\n        // +2% additional hp for every adjacent mountain/rock tile.\r\n\r\n        const pos = this.calculatePosition(world, posX, posY);\r\n\r\n        if (pos === null) // ERROR\r\n            return 0;\r\n\r\n        if (pos === 'midcenter')\r\n            return 48;\r\n\r\n        let value = 0;\r\n\r\n        this.iterateAdjacentTiles(world, posX, posY, false, tile => {\r\n            if (tile instanceof RockTile || tile instanceof MountainTile)\r\n                value += 2;\r\n        });\r\n\r\n        return value;\r\n    }\r\n\r\n    calculateValueAsString(world: World, posX: number, posY: number): string | null {\r\n        const value = this.calculateValue(world, posX, posY);\r\n        return value > 0\r\n            ? ('+' + value)\r\n            : ('' + value);\r\n    }\r\n\r\n    renderImage(world: World, posX: number, posY: number): Sprite | null {\r\n        const pos = this.calculatePosition(world, posX, posY);\r\n        const sprite = pos === null\r\n            ? 'error'\r\n            : `peak-${pos}`;\r\n\r\n        return {\r\n            spriteName: sprite,\r\n        };\r\n    }\r\n\r\n    onTilePlaced(world: World, posX: number, posY: number): boolean {\r\n        if (posX % 2 !== 0)\r\n            return false;\r\n\r\n        return world.tryToSetTileAt(posX + 1, posY, this);\r\n    }\r\n\r\n    onTileReplaced(world: World, posX: number, posY: number, replacement: Tile): boolean {\r\n        if (replacement === PROTO_PEAK_TILE) {\r\n            return false;\r\n        }\r\n\r\n        // top-left corner of the possible 3x3 grid\r\n        let edge: {x: number, y: number} = {x: posX, y: posY};\r\n\r\n        for (let x = 1; x < 3; x++) {\r\n            const next = world.getTileAt(edge.x - 1, edge.y);\r\n            if (next !== this)\r\n                break;\r\n            edge = {x: edge.x - 1, y: edge.y};\r\n        }\r\n\r\n        for (let y = 1; y < 3; y++) {\r\n            const next = world.getTileAt(edge.x, edge.y - 1);\r\n            if (next !== this)\r\n                break;\r\n            edge = {x: edge.x, y: edge.y - 1};\r\n        }\r\n\r\n        for (let x = 0; x < 3; x++) {\r\n            for (let y = 0; y < 3; y++) {\r\n                if (world.getTileAt(edge.x + x, edge.y + y) === this) {\r\n                    world.setTileAt(edge.x + x, edge.y + y, EMPTY_TILE, true);\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** null == invalid */\r\n    private calculatePosition(world: World, posX: number, posY: number): Position | null {\r\n        let edge: [number, number] = [posX, posY];\r\n\r\n        for (let x = 1; x < 3; x++) {\r\n            const next = world.getTileAt(edge[0] - 1, edge[1]);\r\n            if (next !== this)\r\n                break;\r\n            edge = [edge[0] - 1, edge[1]];\r\n        }\r\n\r\n        for (let y = 1; y < 3; y++) {\r\n            const next = world.getTileAt(edge[0], edge[1] - 1);\r\n            if (next !== this)\r\n                break;\r\n            edge = [edge[0], edge[1] - 1];\r\n        }\r\n\r\n        const offsetX = posX - edge[0];\r\n        const offsetY = posY - edge[1];\r\n\r\n        const idx = (offsetY * 3) + offsetX;\r\n        return positionsOrder[idx] ?? null;\r\n    }\r\n}\r\n","import { PEAK_TILE } from \"../registry\";\r\nimport { Sprite } from \"../spritesheet\";\r\nimport { Tile } from \"../tile\";\r\nimport { World } from \"../world\";\r\n\r\nexport class ProtoPeakTile extends Tile {\r\n    paletteImage() {\r\n        return 'peak';\r\n    }\r\n\r\n    renderImage(world: World, posX: number, posY: number): Sprite | null {\r\n        const sprite = 'peak';\r\n\r\n        return {\r\n            spriteName: sprite,\r\n        };\r\n    }\r\n\r\n    /*\r\n        $ @ @   // $ = tileEdge\r\n        @ @ @\r\n        @ @ @\r\n    */\r\n    onTilePlaced(world: World, posX: number, posY: number): boolean {\r\n        // top-left corner of the possible 3x3 grid\r\n        let edge: {x: number, y: number} = {x: posX, y: posY};\r\n\r\n        // console.log('--------');\r\n        // console.log(`[${edge.x}, ${edge.y}] - start`);\r\n\r\n        for (let x = 1; x < 3; x++) {\r\n            const next = world.getTileAt(edge.x - 1, edge.y);\r\n            if (next !== this)\r\n                break;\r\n            edge = {x: edge.x - 1, y: edge.y};\r\n        }\r\n\r\n        // console.log(`[${edge.x}, ${edge.y}] - edge (h)`);\r\n\r\n        for (let y = 1; y < 3; y++) {\r\n            const next = world.getTileAt(edge.x, edge.y - 1);\r\n            if (next !== this)\r\n                break;\r\n            edge = {x: edge.x, y: edge.y - 1};\r\n        }\r\n\r\n        // console.log(`[${edge.x}, ${edge.y}] - edge (final)`);\r\n\r\n        let success = true;\r\n\r\n        for (let x = 0; x < 3; x++) {\r\n            for (let y = 0; y < 3; y++) {\r\n                const next = world.getTileAt(edge.x + x, edge.y + y);\r\n                if (next !== this) {\r\n                    success = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (success) {\r\n            for (let x = 0; x < 3; x++) {\r\n                for (let y = 0; y < 3; y++) {\r\n                    world.setTileAt(edge.x + x, edge.y + y, PEAK_TILE, true);\r\n                }\r\n            }\r\n        }\r\n\r\n        return success;\r\n    }\r\n}\r\n","import { Tile } from \"../tile\";\r\nimport { World } from \"../world\";\r\n\r\nexport class RoadTile extends Tile {\r\n    renderImage(world: World, posX: number, posY: number) {\r\n        return null;\r\n    }\r\n\r\n    showsOnPalette() {\r\n        return false;\r\n    }\r\n}\r\n","import { Tile } from \"./tile\";\r\nimport { EmptyTile } from \"./tiles/empty\";\r\nimport { MountainTile } from \"./tiles/mountain\";\r\nimport { PeakTile } from \"./tiles/peak\";\r\nimport { ProtoPeakTile } from \"./tiles/proto-peak\";\r\nimport { RoadTile } from \"./tiles/road\";\r\nimport { RockTile } from \"./tiles/rock\";\r\n\r\nexport const EMPTY_TILE = new EmptyTile('empty');\r\nexport const ROAD_TILE = new RoadTile('road');\r\nexport const ROCK_TILE = new RockTile('rock');\r\nexport const MOUNTAIN_TILE = new MountainTile('mountain');\r\nexport const PEAK_TILE = new PeakTile('peak');\r\nexport const PROTO_PEAK_TILE = new ProtoPeakTile('proto-peak');\r\n\r\nexport const tileRegistry: Tile[] = [\r\n    EMPTY_TILE,\r\n    ROAD_TILE,\r\n    ROCK_TILE,\r\n    MOUNTAIN_TILE,\r\n    PEAK_TILE,\r\n    PROTO_PEAK_TILE,\r\n];\r\n\r\nexport const emptyTile = EMPTY_TILE;\r\n","import { Json } from \"../json\";\r\nimport { CoordinateMap, SpritesheetInfo } from \"../spritesheet\";\r\n\r\nconst timestamp = new Date().getTime();\r\n\r\nconst spritesheet = {\r\n    jsonUrl: 'dist/spritesheet.json?ts=' + timestamp,\r\n    imageUrl: 'dist/spritesheet.png?ts=' + timestamp,\r\n};\r\n\r\nconst preloadImages = [\r\n    spritesheet.imageUrl,\r\n];\r\n\r\nexport default class LoaderService {\r\n    loadJson(): Promise<Json> {\r\n        return fetch('tiles.json?ts=' + timestamp)\r\n            .then(response => response.json());\r\n    }\r\n\r\n    loadSpritesheetInfo(): Promise<SpritesheetInfo> {\r\n        return fetch(spritesheet.jsonUrl).then(response => response.json())\r\n            .then(json => {\r\n                const coordinateMap: CoordinateMap = {};\r\n\r\n                const wid = json['spritesheet']['width'];\r\n                const hei = json['spritesheet']['height'];\r\n\r\n                for (const key in json['sprites']) {\r\n                    const frame = json['sprites'][key];\r\n                    coordinateMap[key] = {\r\n                        x: frame['x'],\r\n                        y: frame['y'],\r\n                        w: frame['width'],\r\n                        h: frame['height'],\r\n                    };\r\n                }\r\n\r\n                const result: SpritesheetInfo = {\r\n                    id: json['spritesheet']['name'],\r\n                    url: spritesheet.imageUrl,\r\n                    meta: {\r\n                        image: json['spritesheet']['image'],\r\n                        wid: wid,\r\n                        hei: hei,\r\n                    },\r\n                    coordinateMap: coordinateMap,\r\n                };\r\n\r\n                return result;\r\n            });\r\n    }\r\n\r\n    loadSpritesheetImage(): Promise<void> {\r\n        return Promise.all(preloadImages.map(preloadImage => {\r\n            return new Promise((resolve, reject) => {\r\n                const img = new Image();\r\n                img.onload = resolve;\r\n                img.onerror = reject;\r\n                img.src = preloadImage;\r\n            });\r\n        })).then();\r\n    }\r\n}\r\n","import { MapDefinitions, TileResolver } from \"../components/TilerManager\";\r\nimport { Tile } from \"./tile\";\r\n\r\nexport type World = Readonly<{\r\n    mapWidth: number;\r\n    mapHeight: number;\r\n\r\n    getTileAt(posX: number, posY: number): Tile | undefined;\r\n    setTileAt(posX: number, posY: number, tile: Tile, skipEvents?: boolean): void;\r\n    tryToSetTileAt(posX: number, posY: number, tile: Tile, skipEvents?: boolean): boolean; // true if succeeded\r\n}>;\r\n\r\nexport class StandardWorld implements World {\r\n    readonly mapDefs: MapDefinitions;\r\n    readonly tileResolver: TileResolver;\r\n    private _data: number[];\r\n    private updateData: (data: number[]) => void;\r\n\r\n    constructor(\r\n        mapDefs: MapDefinitions,\r\n        tileResolver: TileResolver,\r\n        tileData: number[],\r\n        updateData: (data: number[]) => void,\r\n    ) {\r\n        this.mapDefs = mapDefs;\r\n        this.tileResolver = tileResolver;\r\n        this._data = tileData;\r\n        this.updateData = updateData;\r\n    }\r\n\r\n    get mapWidth() {\r\n        return this.mapDefs.mapWidth;\r\n    }\r\n\r\n    get mapHeight() {\r\n        return this.mapDefs.mapHeight;\r\n    }\r\n\r\n    get data(): readonly number[] {\r\n        return this._data;\r\n    }\r\n\r\n    overwriteData(data: number[]) {\r\n        this._data = data;\r\n    }\r\n\r\n    getTileAt(posX: number, posY: number): Tile | undefined {\r\n        if (posX < 0 || posX >= this.mapWidth\r\n            || posY < 0 || posY >= this.mapHeight)\r\n        {\r\n            return undefined;\r\n        }\r\n\r\n        const tileId = this._data[(posY * this.mapWidth) + posX];\r\n        return this.tileResolver.getTileFromId(tileId);\r\n    }\r\n\r\n    setTileAt(posX: number, posY: number, tile: Tile, skipEvents = false): void {\r\n        const curTile = this.getTileAt(posX, posY);\r\n\r\n        if (tile === curTile || curTile === undefined)\r\n            return;\r\n\r\n        const tileId = this.tileResolver.getIdFromTile(tile);\r\n        this._data[(posY * this.mapWidth) + posX] = tileId;\r\n\r\n        if (!skipEvents) {\r\n            curTile.onTileReplaced(this, posX, posY, tile);\r\n            tile.onTilePlaced(this, posX, posY);\r\n        }\r\n\r\n        this.updateData([...this._data]);\r\n    }\r\n\r\n    tryToSetTileAt(posX: number, posY: number, tile: Tile, skipEvents = false): boolean {\r\n        this.setTileAt(posX, posY, tile, skipEvents);\r\n        return true;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport styles from './TileManager.module.scss';\r\nimport { Json } from '../lib/json';\r\nimport Common from '../Common';\r\nimport TabView from './TabView';\r\nimport TilerOptions from './TilerOptions';\r\nimport TilerMapPanel from './mapPanel/TilerMapPanel';\r\nimport TilerStringPanel from './TilerStringPanel';\r\nimport { Tile } from '../lib/tile';\r\nimport { emptyTile, tileRegistry } from '../lib/registry';\r\nimport LoaderService from '../lib/services/loader-service';\r\nimport { SpritesheetInfo } from '../lib/spritesheet';\r\nimport { MouseButton } from '../lib/types';\r\nimport { StandardWorld } from '../lib/world';\r\n\r\nexport type MapDefinitions = {\r\n    mapWidth: number;\r\n    mapHeight: number;\r\n};\r\n\r\nexport type TileResolver = {\r\n    allTiles: Tile[];\r\n    getTileFromId: (tileId: number) => Tile; // tile id -> tile\r\n    getIdFromTile: (tile: Tile) => number; // tile -> tile id\r\n};\r\n\r\nexport type MapRendererOptions = {\r\n    mapGridWidthPx: number;\r\n    mapGridHeightPx: number;\r\n    cellWidthPx: number;\r\n    cellHeightPx: number;\r\n    cellFontSizePx: number;\r\n    renderMode: RenderMode;\r\n};\r\n\r\nexport type RenderMode = 'normal' | 'value';\r\n\r\nexport type PaletteController = {\r\n    currentTile: Tile | null;\r\n};\r\n\r\nexport type SpritePool = {[spriteName: string]: React.ReactElement}; // maps spriteNames -> Elements\r\n\r\ntype MainOptions = {\r\n    mapWidth: number;\r\n    mapHeight: number;\r\n};\r\n\r\nconst loaderService = new LoaderService();\r\n\r\nconst TilerManager: React.FC<MainOptions> = (props) => {\r\n    //:: State\r\n\r\n    const [statusMessage, setStatusMessage] = React.useState('Loading...');\r\n    const [jsonData, setJsonData] = React.useState<Json>();\r\n    const [mapDefinitions, setMapDefinitions] = React.useState<MapDefinitions>({\r\n        mapWidth: props.mapWidth,\r\n        mapHeight: props.mapHeight,\r\n    });\r\n    const [tileResolver, setTileResolver] = React.useState<TileResolver>();\r\n    const [tileData, setTileData] = React.useState<number[]>();\r\n    const [mapRendererOptions, setMapRendererOptions] = React.useState<MapRendererOptions>(\r\n        DEFAULT_MAP_RENDERER_OPTIONS\r\n    );\r\n    const [spritePool, setSpritePool] = React.useState<SpritePool>();\r\n    const [world, setWorld] = React.useState<StandardWorld>();\r\n\r\n    const paletteController = React.useRef<PaletteController>({\r\n        currentTile: null,\r\n    });\r\n\r\n    //:: Hooks\r\n\r\n    React.useEffect(() => {\r\n        setStatusMessage('Loading tiles...');\r\n\r\n        loaderService.loadJson().then(json => {\r\n            setStatusMessage('Loading spritesheet information...');\r\n\r\n            loaderService.loadSpritesheetInfo().then(spritesheetInfo => {\r\n                setStatusMessage('Loading spritesheet image...');\r\n\r\n                // TODO call this method \\/ asynchronously to the above\r\n                loaderService.loadSpritesheetImage().then(() => {\r\n                    setStatusMessage('Generating sprite elements...');\r\n\r\n                    setJsonData(json);\r\n                    setSpritePool(loadSpritePool(spritesheetInfo));\r\n                });\r\n            });\r\n        }).catch(Common.handleError);\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if (jsonData) {\r\n            const data = jsonData as Record<string, string>;\r\n            const tileIdsToNames: {[id: number]: Tile} = {};\r\n            const tileNamesToIds: {[name: string]: number} = {};\r\n\r\n            for (const tileIdStr in data) {\r\n                const tileId = parseInt(tileIdStr);\r\n                const tileIdName = data[tileIdStr];\r\n                const tile = tileRegistry.find(next => next.idName === tileIdName);\r\n\r\n                if (!tile)\r\n                    throw new Error(`No tile registered with name: '${tileIdName}'`);\r\n\r\n                for (const key in tileIdsToNames) {\r\n                    const value = tileIdsToNames[key];\r\n\r\n                    if (value.idName === tileIdName)\r\n                        throw new Error(`Two tiles have duplicated id names: ${tileIdName}`);\r\n                }\r\n\r\n                tileIdsToNames[tileId] = tile;\r\n                tileNamesToIds[tile.idName] = tileId;\r\n            }\r\n\r\n            setTileResolver({\r\n                allTiles: tileRegistry,\r\n                getTileFromId: (tileId) => tileIdsToNames[tileId],\r\n                getIdFromTile: (tile) => tileNamesToIds[tile.idName],\r\n            });\r\n        }\r\n    }, [jsonData]);\r\n\r\n    React.useEffect(() => {\r\n        if (tileResolver) {\r\n            const emptyId = tileResolver.getIdFromTile(emptyTile);\r\n            const data = initializeTileData(mapDefinitions.mapWidth, mapDefinitions.mapHeight, emptyId);\r\n\r\n            setTileData(data);\r\n            setWorld(new StandardWorld(mapDefinitions, tileResolver, data, setTileData));\r\n        }\r\n    }, [tileResolver, mapDefinitions]);\r\n\r\n    //:: Setup\r\n\r\n    if (!jsonData || !tileData || !tileResolver || !spritePool || !world) {\r\n        return (\r\n            <div>{statusMessage}</div>\r\n        );\r\n    }\r\n\r\n    const onTileClick = (posX: number, posY: number, button: MouseButton) => {\r\n        if (posX < 0 || posX >= mapDefinitions.mapWidth\r\n                || posY < 0 || posY >= mapDefinitions.mapHeight)\r\n        {\r\n            console.error(`onTileClick out of bounds: [${posX}, ${posY}]`);\r\n            return;\r\n        }\r\n\r\n        const paletteTile = button === MouseButton.Right\r\n            ? emptyTile\r\n            : paletteController.current.currentTile;\r\n\r\n        if (paletteTile === null)\r\n            return;\r\n\r\n        world.tryToSetTileAt(posX, posY, paletteTile);\r\n    };\r\n\r\n    //:: Components\r\n\r\n    const mapView = <TilerMapPanel\r\n        tileData={tileData}\r\n        setTileData={setTileData}\r\n        mapDefinitions={mapDefinitions}\r\n        mapRendererOptions={mapRendererOptions}\r\n        tileResolver={tileResolver}\r\n        paletteController={paletteController.current}\r\n        spritePool={spritePool}\r\n        onClick={onTileClick}\r\n        world={world}\r\n    />;\r\n\r\n    const stringView = <TilerStringPanel />;\r\n\r\n    return (\r\n        <div className={styles.rootWrapper}>\r\n            <div className={styles.tabviewWrapper} style={{\r\n                width: mapRendererOptions.mapGridWidthPx,\r\n                height: mapRendererOptions.mapGridHeightPx,\r\n            }}>\r\n                <TabView\r\n                    elements={[\r\n                        { element: mapView, label: 'Tile Map' },\r\n                        { element: stringView, label: 'Import/Export' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <TilerOptions\r\n                mapDefinitions={mapDefinitions}\r\n                setMapDefinitions={setMapDefinitions}\r\n                mapRendererOptions={mapRendererOptions}\r\n                setMapRendererOptions={setMapRendererOptions}\r\n                resetMap={() => {\r\n                    const emptyId = tileResolver.getIdFromTile(emptyTile);\r\n                    const data = initializeTileData(mapDefinitions.mapWidth, mapDefinitions.mapHeight, emptyId);\r\n\r\n                    world.overwriteData(data);\r\n                    setTileData(data);\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TilerManager;\r\n\r\nexport const DEFAULT_MAP_RENDERER_OPTIONS: MapRendererOptions = {\r\n    mapGridWidthPx: 800,\r\n    mapGridHeightPx: 650,\r\n    cellWidthPx: 44,\r\n    cellHeightPx: 44,\r\n    cellFontSizePx: 16,\r\n    renderMode: 'normal',\r\n};\r\n\r\nfunction initializeTileData(wid: number, hei: number, fillId: number): number[] {\r\n    const result = new Array(wid * hei).fill(fillId);\r\n    return result;\r\n}\r\n\r\nfunction loadSpritePool(info: SpritesheetInfo): SpritePool {\r\n    const spritePool: SpritePool = {};\r\n\r\n    for (const spriteName in info.coordinateMap) {\r\n        const coordinates = info.coordinateMap[spriteName];\r\n\r\n        const bgWid = ((info.meta.wid / coordinates.w) * 100) + '%';\r\n        const bgHei = ((info.meta.hei / coordinates.h) * 100) + '%';\r\n        const posX = ((coordinates.x / (info.meta.wid - coordinates.w)) * 100) + '%';\r\n        const posY = ((coordinates.y / (info.meta.hei - coordinates.h)) * 100) + '%';\r\n\r\n        const element = (\r\n            <div className='sprite'\r\n            style={{\r\n                backgroundImage: `url('${info.url}')`,\r\n                backgroundPosition: `${posX} ${posY}`,\r\n                backgroundSize: `${bgWid} ${bgHei}`,\r\n                width: '100%',\r\n                height: '100%',\r\n            }} />\r\n        );\r\n\r\n        spritePool[spriteName] = element;\r\n    }\r\n\r\n    return spritePool;\r\n}\r\n","import './App.scss';\r\nimport TilerManager from './components/TilerManager';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <TilerManager\r\n                mapWidth={21}\r\n                mapHeight={12}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n    <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}